// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: play.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_play_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_play_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_play_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_play_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_play_2eproto;
namespace mongo {
class InputPackage;
class InputPackageDefaultTypeInternal;
extern InputPackageDefaultTypeInternal _InputPackage_default_instance_;
}  // namespace mongo
PROTOBUF_NAMESPACE_OPEN
template<> ::mongo::InputPackage* Arena::CreateMaybeMessage<::mongo::InputPackage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mongo {

// ===================================================================

class InputPackage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mongo.InputPackage) */ {
 public:
  InputPackage();
  virtual ~InputPackage();

  InputPackage(const InputPackage& from);
  InputPackage(InputPackage&& from) noexcept
    : InputPackage() {
    *this = ::std::move(from);
  }

  inline InputPackage& operator=(const InputPackage& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputPackage& operator=(InputPackage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InputPackage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InputPackage* internal_default_instance() {
    return reinterpret_cast<const InputPackage*>(
               &_InputPackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InputPackage& a, InputPackage& b) {
    a.Swap(&b);
  }
  inline void Swap(InputPackage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InputPackage* New() const final {
    return CreateMaybeMessage<InputPackage>(nullptr);
  }

  InputPackage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InputPackage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InputPackage& from);
  void MergeFrom(const InputPackage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputPackage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mongo.InputPackage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_play_2eproto);
    return ::descriptor_table_play_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMovexFieldNumber = 3,
    kMoveyFieldNumber = 4,
    kFireFieldNumber = 5,
    kUsernameFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // repeated sint32 movex = 3;
  int movex_size() const;
  private:
  int _internal_movex_size() const;
  public:
  void clear_movex();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_movex(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_movex() const;
  void _internal_add_movex(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_movex();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 movex(int index) const;
  void set_movex(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_movex(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      movex() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_movex();

  // repeated sint32 movey = 4;
  int movey_size() const;
  private:
  int _internal_movey_size() const;
  public:
  void clear_movey();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_movey(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_movey() const;
  void _internal_add_movey(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_movey();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 movey(int index) const;
  void set_movey(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_movey(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      movey() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_movey();

  // repeated bool fire = 5;
  int fire_size() const;
  private:
  int _internal_fire_size() const;
  public:
  void clear_fire();
  private:
  bool _internal_fire(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_fire() const;
  void _internal_add_fire(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_fire();
  public:
  bool fire(int index) const;
  void set_fire(int index, bool value);
  void add_fire(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      fire() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_fire();

  // string username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // int64 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:mongo.InputPackage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > movex_;
  mutable std::atomic<int> _movex_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > movey_;
  mutable std::atomic<int> _movey_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > fire_;
  mutable std::atomic<int> _fire_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_play_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InputPackage

// string username = 1;
inline void InputPackage::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InputPackage::username() const {
  // @@protoc_insertion_point(field_get:mongo.InputPackage.username)
  return _internal_username();
}
inline void InputPackage::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:mongo.InputPackage.username)
}
inline std::string* InputPackage::mutable_username() {
  // @@protoc_insertion_point(field_mutable:mongo.InputPackage.username)
  return _internal_mutable_username();
}
inline const std::string& InputPackage::_internal_username() const {
  return username_.GetNoArena();
}
inline void InputPackage::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InputPackage::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mongo.InputPackage.username)
}
inline void InputPackage::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mongo.InputPackage.username)
}
inline void InputPackage::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mongo.InputPackage.username)
}
inline std::string* InputPackage::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InputPackage::release_username() {
  // @@protoc_insertion_point(field_release:mongo.InputPackage.username)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InputPackage::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:mongo.InputPackage.username)
}

// int64 timestamp = 2;
inline void InputPackage::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InputPackage::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InputPackage::timestamp() const {
  // @@protoc_insertion_point(field_get:mongo.InputPackage.timestamp)
  return _internal_timestamp();
}
inline void InputPackage::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void InputPackage::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:mongo.InputPackage.timestamp)
}

// repeated sint32 movex = 3;
inline int InputPackage::_internal_movex_size() const {
  return movex_.size();
}
inline int InputPackage::movex_size() const {
  return _internal_movex_size();
}
inline void InputPackage::clear_movex() {
  movex_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputPackage::_internal_movex(int index) const {
  return movex_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputPackage::movex(int index) const {
  // @@protoc_insertion_point(field_get:mongo.InputPackage.movex)
  return _internal_movex(index);
}
inline void InputPackage::set_movex(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  movex_.Set(index, value);
  // @@protoc_insertion_point(field_set:mongo.InputPackage.movex)
}
inline void InputPackage::_internal_add_movex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  movex_.Add(value);
}
inline void InputPackage::add_movex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_movex(value);
  // @@protoc_insertion_point(field_add:mongo.InputPackage.movex)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
InputPackage::_internal_movex() const {
  return movex_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
InputPackage::movex() const {
  // @@protoc_insertion_point(field_list:mongo.InputPackage.movex)
  return _internal_movex();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
InputPackage::_internal_mutable_movex() {
  return &movex_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
InputPackage::mutable_movex() {
  // @@protoc_insertion_point(field_mutable_list:mongo.InputPackage.movex)
  return _internal_mutable_movex();
}

// repeated sint32 movey = 4;
inline int InputPackage::_internal_movey_size() const {
  return movey_.size();
}
inline int InputPackage::movey_size() const {
  return _internal_movey_size();
}
inline void InputPackage::clear_movey() {
  movey_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputPackage::_internal_movey(int index) const {
  return movey_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputPackage::movey(int index) const {
  // @@protoc_insertion_point(field_get:mongo.InputPackage.movey)
  return _internal_movey(index);
}
inline void InputPackage::set_movey(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  movey_.Set(index, value);
  // @@protoc_insertion_point(field_set:mongo.InputPackage.movey)
}
inline void InputPackage::_internal_add_movey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  movey_.Add(value);
}
inline void InputPackage::add_movey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_movey(value);
  // @@protoc_insertion_point(field_add:mongo.InputPackage.movey)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
InputPackage::_internal_movey() const {
  return movey_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
InputPackage::movey() const {
  // @@protoc_insertion_point(field_list:mongo.InputPackage.movey)
  return _internal_movey();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
InputPackage::_internal_mutable_movey() {
  return &movey_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
InputPackage::mutable_movey() {
  // @@protoc_insertion_point(field_mutable_list:mongo.InputPackage.movey)
  return _internal_mutable_movey();
}

// repeated bool fire = 5;
inline int InputPackage::_internal_fire_size() const {
  return fire_.size();
}
inline int InputPackage::fire_size() const {
  return _internal_fire_size();
}
inline void InputPackage::clear_fire() {
  fire_.Clear();
}
inline bool InputPackage::_internal_fire(int index) const {
  return fire_.Get(index);
}
inline bool InputPackage::fire(int index) const {
  // @@protoc_insertion_point(field_get:mongo.InputPackage.fire)
  return _internal_fire(index);
}
inline void InputPackage::set_fire(int index, bool value) {
  fire_.Set(index, value);
  // @@protoc_insertion_point(field_set:mongo.InputPackage.fire)
}
inline void InputPackage::_internal_add_fire(bool value) {
  fire_.Add(value);
}
inline void InputPackage::add_fire(bool value) {
  _internal_add_fire(value);
  // @@protoc_insertion_point(field_add:mongo.InputPackage.fire)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
InputPackage::_internal_fire() const {
  return fire_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
InputPackage::fire() const {
  // @@protoc_insertion_point(field_list:mongo.InputPackage.fire)
  return _internal_fire();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
InputPackage::_internal_mutable_fire() {
  return &fire_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
InputPackage::mutable_fire() {
  // @@protoc_insertion_point(field_mutable_list:mongo.InputPackage.fire)
  return _internal_mutable_fire();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace mongo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_play_2eproto
